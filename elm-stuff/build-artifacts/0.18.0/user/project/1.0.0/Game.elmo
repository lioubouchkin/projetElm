var _user$project$Game$decodeGameState = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'data',
		_1: {
			ctor: '::',
			_0: 'state',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Game$userBordsStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'padding', _1: '0 50px'},
			_1: {ctor: '[]'}
		}
	});
var _user$project$Game$renderCards = function (lst) {
	return A2(
		_elm_lang$html$Html$ul,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$map,
			function (l) {
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(l),
						_1: {ctor: '[]'}
					});
			},
			lst));
};
var _user$project$Game$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Game$adversaire = {cards: 0, points: 0, name: '', status: 0};
var _user$project$Game$player = {
	cards: {ctor: '[]'},
	points: 0,
	name: '',
	status: 0
};
var _user$project$Game$model = {pl: _user$project$Game$player, adv: _user$project$Game$adversaire};
var _user$project$Game$init = {ctor: '_Tuple2', _0: _user$project$Game$model, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Game$Player = F4(
	function (a, b, c, d) {
		return {cards: a, points: b, name: c, status: d};
	});
var _user$project$Game$Adversaire = F4(
	function (a, b, c, d) {
		return {cards: a, points: b, name: c, status: d};
	});
var _user$project$Game$Model = F2(
	function (a, b) {
		return {pl: a, adv: b};
	});
var _user$project$Game$decodeJoinGame = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Game$Model,
	A5(
		_elm_lang$core$Json_Decode$map4,
		_user$project$Game$Player,
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'cards',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'points',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'name',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'status',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int)),
	A5(
		_elm_lang$core$Json_Decode$map4,
		_user$project$Game$Adversaire,
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'cards',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'points',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'name',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'status',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int)));
var _user$project$Game$decodePickCard = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Game$Model,
	A5(
		_elm_lang$core$Json_Decode$map4,
		_user$project$Game$Player,
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'cards',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'points',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'name',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'player',
				_1: {
					ctor: '::',
					_0: 'status',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int)),
	A5(
		_elm_lang$core$Json_Decode$map4,
		_user$project$Game$Adversaire,
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'cards',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'points',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'name',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'adversaire',
				_1: {
					ctor: '::',
					_0: 'status',
					_1: {ctor: '[]'}
				}
			},
			_elm_lang$core$Json_Decode$int)));
var _user$project$Game$None = {ctor: 'None'};
var _user$project$Game$GameStateResponse = function (a) {
	return {ctor: 'GameStateResponse', _0: a};
};
var _user$project$Game$gameState = function () {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:8080/gameState/', _user$project$Game$model.pl.name);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Game$decodeGameState);
	return A2(_elm_lang$http$Http$send, _user$project$Game$GameStateResponse, request);
}();
var _user$project$Game$GameState = {ctor: 'GameState'};
var _user$project$Game$PickCardResponse = function (a) {
	return {ctor: 'PickCardResponse', _0: a};
};
var _user$project$Game$pickCard = function (player) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:8080/pickCard/', player);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Game$decodePickCard);
	return A2(_elm_lang$http$Http$send, _user$project$Game$PickCardResponse, request);
};
var _user$project$Game$PickCard = {ctor: 'PickCard'};
var _user$project$Game$JoinGameResponse = function (a) {
	return {ctor: 'JoinGameResponse', _0: a};
};
var _user$project$Game$joinGame = function (player) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:8080/newgame/', player);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Game$decodeJoinGame);
	return A2(_elm_lang$http$Http$send, _user$project$Game$JoinGameResponse, request);
};
var _user$project$Game$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Display':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PickCard':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Game$pickCard(model.pl.name)
				};
			case 'PickCardResponse':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Game$Model, model.pl, model.adv),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Game$Model, model.pl, model.adv),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'GameState':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Game$gameState};
			case 'GameStateResponse':
				if (_p0._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'JoinGame':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Game$joinGame(model.pl.name)
				};
			case 'JoinGameResponse':
				if (_p0._0.ctor === 'Ok') {
					var _p1 = _p0._0._0;
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Game$Model, _p1.pl, _p1.adv),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: A2(_user$project$Game$Model, model.pl, model.adv),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Name':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_user$project$Game$Model,
						A4(_user$project$Game$Player, model.pl.cards, model.pl.points, _p0._0, model.pl.status),
						A4(_user$project$Game$Adversaire, model.adv.cards, model.adv.points, model.adv.name, model.adv.status)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Game$JoinGame = {ctor: 'JoinGame'};
var _user$project$Game$Name = function (a) {
	return {ctor: 'Name', _0: a};
};
var _user$project$Game$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Game$userBordsStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h2,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								(!_elm_lang$core$Native_Utils.eq(model.pl.status, 0)) ? model.pl.name : ''),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: (!_elm_lang$core$Native_Utils.eq(model.pl.status, 0)) ? A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(''),
								_1: {ctor: '[]'}
							}) : A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Votre nom'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Game$Name),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Cards:'),
									_1: {
										ctor: '::',
										_0: (!_elm_lang$core$Native_Utils.eq(model.pl.status, 0)) ? _user$project$Game$renderCards(model.pl.cards) : _elm_lang$html$Html$text(''),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Points: '),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												(!_elm_lang$core$Native_Utils.eq(model.pl.status, 0)) ? _elm_lang$core$Basics$toString(model.pl.points) : ''),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												(!_elm_lang$core$Native_Utils.eq(model.pl.status, 0)) ? _user$project$Game$PickCard : (_elm_lang$core$Native_Utils.eq(model.pl.status, 0) ? _user$project$Game$JoinGame : _user$project$Game$None)),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												(!_elm_lang$core$Native_Utils.eq(model.pl.status, 0)) ? 'Pick Card' : (_elm_lang$core$Native_Utils.eq(model.pl.status, 0) ? 'Join Game' : '')),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Game$userBordsStyle,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									(_elm_lang$core$Native_Utils.eq(model.adv.status, 1) || _elm_lang$core$Native_Utils.eq(model.pl.status, 1)) ? 'against' : ''),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Game$userBordsStyle,
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h2,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										(!_elm_lang$core$Native_Utils.eq(model.adv.status, 0)) ? model.adv.name : 'waiting for a new player...'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											(!_elm_lang$core$Native_Utils.eq(model.adv.status, 0)) ? 'Cards: ' : ''),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												(!_elm_lang$core$Native_Utils.eq(model.adv.status, 0)) ? _elm_lang$core$Basics$toString(model.adv.cards) : ''),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												(!_elm_lang$core$Native_Utils.eq(model.adv.status, 0)) ? 'Points: ' : ''),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													(!_elm_lang$core$Native_Utils.eq(model.adv.status, 0)) ? _elm_lang$core$Basics$toString(model.adv.points) : ''),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Game$main = _elm_lang$html$Html$program(
	{init: _user$project$Game$init, view: _user$project$Game$view, update: _user$project$Game$update, subscriptions: _user$project$Game$subscriptions})();
var _user$project$Game$Display = {ctor: 'Display'};
